import * as React from "react";
import { mount, ReactWrapper } from "enzyme";
import * as nock  from 'nock';
import { serverUrl } from 'configuration';

import Profile from "./index";
import { UpdateAccountNotification } from "./types";
import { flushPromises, simulateInputChange, invalidPassword, invalidEmail, genericValidPassword, genericValidEmail, noUsername } from "../../../../tests/testUtils";

describe('Create Account component', () => {

  // Main container for the CreateAccount Component
  let container: ReactWrapper;

  // Input fields
  let newUsernameInput: ReactWrapper;
  let newEmailInput: ReactWrapper;
  let newPasswordInput: ReactWrapper;
  let passwordInput: ReactWrapper;
  let notification: ReactWrapper;

  // Submit Button
  let submitButton: ReactWrapper;

  // Class selectors
  const newUsernameSelector;
  const newEmailSelector;
  const newPasswordSelector;
  const passwordSelector;
  const notificationSelector;

  beforeEach(() => {
    container = mount(<Profile />);

    const newEmailInput = container.find(newEmailSelector);
    expect(newEmailInput.length).toEqual(1);

    newPasswordInput = container.find(newPasswordSelector);
    expect(newPasswordInput.length).toEqual(1);

    newUsernameInput = container.find(newUsernameSelector);
    expect(newUsernameInput.length).toEqual(1);

    passwordInput = container.find(passwordSelector);
    expect(passwordInput.length).toEqual(1);

    notification = container.find(notificationSelector);
    expect(notification.text()).toBe(UpdateAccountNotification.initial);

    submitButton = container.find('.create-account__submit');

  });
 
  it('Shows short password notification for new password correctly', async (done) => {

    simulateInputChange(newPasswordInput, invalidPassword);
    simulateInputChange(passwordInput, genericValidPassword);

    await flushPromises();
    container.update();

    submitButton.simulate('click');
    expect(notification.text()).toBe(UpdateAccountNotification.shortPassword);
    done();
  });

  it('Shows invalid email notification correctly', async (done) => {

    simulateInputChange(newEmailInput, invalidEmail);
    simulateInputChange(passwordInput, genericValidPassword);

    submitButton.simulate('click');
    
    await flushPromises();
    container.update();

    expect(notification.text()).toBe(UpdateAccountNotification.invalidEmail);
    done();
  });

  it('Wrong password notification for short current Password', async (done) => {

    simulateInputChange(newEmailInput, genericValidEmail);
    simulateInputChange(passwordInput, invalidPassword);

    submitButton.simulate('click');
    
    await flushPromises();
    container.update();

    expect(notification.text()).toBe(UpdateAccountNotification.incorrectCurrentPassword);
    done();
  });

  it('Wrong current password', async (done) => {
    nock(serverUrl)
    .post('/api/user/edit')
    .reply(401);

    simulateInputChange(newEmailInput, genericValidEmail);
    simulateInputChange(passwordInput, genericValidPassword);

    submitButton.simulate('click');
    
    await flushPromises();
    container.update();

    expect(notification.text()).toBe(UpdateAccountNotification.incorrectCurrentPassword);
  });

  it('Duplicate email or username', async (done) => {
    nock(serverUrl)
    .post('/api/user/edit')
    .reply(409);

    simulateInputChange(newEmailInput, genericValidEmail);
    simulateInputChange(passwordInput, genericValidPassword);

    submitButton.simulate('click');
    
    await flushPromises();
    container.update();

    expect(notification.text()).toBe(UpdateAccountNotification.incorrectCurrentPassword);
  });

  it('Email update successfull', async (done) => {
    nock(serverUrl)
    .post('/api/user/edit')
    .reply(200);

    simulateInputChange(newEmailInput, genericValidEmail);
    simulateInputChange(passwordInput, genericValidPassword);

    submitButton.simulate('click');
    
    await flushPromises();
    container.update();

    expect(notification.text()).toBe(UpdateAccountNotification.initial);
  })
})